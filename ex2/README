emmanuelle,amit.moses1


https://drive.google.com/file/d/1-Fcp_ww222WiLnp0HGDfJUaVlnPxq1MI/view?usp=sharing
## 1. העלמת הלבנה
את העלמת הלבנה בחרנו לעשות דרך האסטרטגיה הבסיסית בלבד של הלבנה הנבחרת – כל לבנה  
משתמשת בדקורטור של אסטרטגיה, לכל אסטרטגיה ניתן להוסיף אסטרטגיית המשך לפיו תפעל,  
האסטרטגיה הבסיסית תפעל למחיקת הלבנה – באמצעות מתן גישה (הכלה) של מצביע למנהל המשחק  
– דרכה ניתן להסיר אובייקטים. היתרון בהסרת הלבנה דרך האסטרטגיה מאפשרת תמיכה בעיקרון  
open-close לדוגמא אם נרצה בעתיד להרחיב את שבירת הלבנה כך שכל לבנה מסוג שונה תשבר עם  
אפקטים מיוחדים לה. יתרון נוסף לשיטה זאת כך שמתאפשרת מחיקת אובייקטים ממנהל המשחק ובו-  
זמנית עדכון מספר הלבנות שנשברו בתוך מנהל המשחק – בהתאם לחוקי המשחק אותו הוא מנהל.  
יתרון נוסף במחיקה דרך מנהל המשחק הוא שניתן לבדוק האם הלבנה נמחקה כבר כדי למנוע כפל  
בספירת הלבנים שנמחקו. חסרון לדרך זאת – עבור כל מופע של אסטרטגיה נצטרך ליצור מופע חדש  
של אסטרטגיה בסיסית (זיכרון וזמן ריצה נוסף).

## 2. הצגת מספר החיים של השחקן
את הצגת מספר החיים של השחקן מימשנו באמצעות מחלקה ייעודית המקבלת קורדינאטה המייצגת  
את הפינה השמאלית של הפאנל ביחס למסך, תמונה של הלב, ותווית טקסט שכבר נוספה למסך  
לפני כן. בהתאם לקורדינאטה שהתקבלה ימוקם בהתחלה תווית הטקסט בצד שמאל ולאחר מכן  
ימוקמו לבבות בהתאם, כך שלאחר כל הוספת לב נזכור את המיקום שימוקם הלב הבא עם תוספת  
המרווח הרצוי, וכן הלאה. במחיקת לב ימחק באחד מיקום הלב הנוכחי כך שהלב שימוקם בהמשך  
ימוקם בנקודה הרצויה של הלב שנמחק זה עתה. בעת עדכון נגדיר את הצבע הרצוי של תווית  
הטקסט באמצעות switch.

### מחלקות נוספות שהוספנו:
- **TempPaddle**: מחלקה המגדירה את הדיסקית המתקבלת בעת הפעלת התנהגות דיסקית נוספת.  
  מחלקה זאת יורשת מהדסקית המקורית וממשת את עיקרון ההכלה על ידי כך ששומרת מצביע  
  לרשימת האובייקטים במשחק, דרכה ניתן למחוק ולהוסיף את הדיסקית. השתמשנו ברעיון זה  
  מאחר שהדיסקית המקורית אינה צריכה את אוסף האובייקטים במשחק, זאת מכיוון שנשארת על  
  המסך לאורך כל המשחק.
  
- **Heart**: מחלקה המגדירה אובייקט המייצג לב שיוצא מהלבנה. המחלקה יורשת מאויבייקט  
  רגיל של המשחק. דרסנו את הפונקציה onCollisionEnter ומימשנו אותה כך שכאשר הלב יתנגש  
  בדסקית הראשית יתווסף חיים לשחקן. דאגנו שהלב יוכל להתנגש רק עם הדסקית הראשית  
  באמצעות דריסת הפונקציה shouldCollideWith.

## 3. התנהגויות מיוחדות
הוספת אובייקטים נעשית באמצעות מצביע המוכל בכל אסטרטגיה למנהל המשחק דרכו ניתן להוסיף  
את האובייקטים לאחר מחיקת הלבנה. פעולת הוספת האובייקט תציג אותו על גבי המסך.

### כדורים נוספים (MoreBallsCollisionStrategy)
בהתנגשות הכדור עם הלבנה, ניצור 2 כדורי puck שיקבלו את מיקום מרכז הלבנה,  
וניצור שיפוע בהתאם להנחיות.

### דיסקית נוספת (MorePaddleCollisionStrategy)
בהתנגשות הכדור עם הלבנה, נבדוק מול מנהל המשחק האם קיימת כבר הדיסקית הנוספת,  
נוסיף אותה רק אם לא קיימת דרך מנהל המשחק. מחיקת הדסקית נעשית דרך המחלקה של  
הדסקית הזמנית, נעשית בדיקה עם כמות ההתנגשויות, שמשתנה בהתאם כאשר מתבצעת  
התנגשות עם הכדור באמצעות פונקציית onCollisionEnter.

### מצב טורבו (TurboCollisionStrategy)
בהתנגשות הכדור עם הלבנה, נבדוק האם הכדור כבר במצב טורבו על ידי כך שנבקש  
ממנהל המשחק את מספר ההתנגשויות של הכדור הראשי באמצעות גישה לכדור דרכו,  
ונבדוק אם מספר זה קטן או שווה לדד ליין של מצב הטורבו האחרון שהופעל, אם כן  
הכדור נמצא כבר במצב טורבו, אחרת נעדכן דד ליין חדש למספר ההתנגשויות הנוכחי  
בתוספת מספר ההתנגשויות למצב הטורבו. נשנה את תמונת הכדור, ונגדיל את מהירותו  
באמצעות פונקציות נוספות שהוספנו לכדור שבאמצעותן ניתן לשלוט על מהירות הכדור.

### החזרת פסילה (AddLifeCollisionStrategy)
בהתנגשות הכדור עם הלבנה, ניצור אובייקט מסוג לב, שיקבל את מיקום מרכז הלבנה  
ובמהירות הנדרשת ונוסיף אותה דרך מנהל המשחק. דרך מחלקת הלב, יזוהו התנגשויות  
ושתזוהה התנגשות יעודכן תצוגת החיים הנומרית והגרפית. התנגשויות יזוהו רק עם  
הדיסקית הראשית – בעזרת שימוש בפונקציה shouldCollideWith.

## 4. התנהגות כפולה באמצעות דקורטור
מימשנו את ההתנהגות הכפולה באמצעות העיצוב דקורטור. בדומה למעבדה עם החרבות  
והמגנים, רק שהפעם מדובר באסטרטגיות – לכל אסטרטגיה שמורה כמשתנה מחלקה אובייקט  
CollisionStrategy בשם nextStrategy, כל פעם נוכל לקבוע את האסטרטגיה הבאה במחסנית  
האסטרטגיות, בדומה לשרשרת חוליות מקושרות, לכל אסטרטגיה יש אסטרטגיה שתפעל מיד  
לאחריה. ככה נוכל לשלב ביניהן. האסטרטגיה שתהיה בקצה השרשרת, היא האסטרטגיה  
הבסיסית, שהיא היחידה שמוחקת את הלבנה. והיא תופעל ראשונה בכל קריאה לאסטרטגיה.  
ככה שכל אסטרטגיה בודדת ממומשת כאסטרטגיה ובנוסף מחוברת באמצעות דקורטור לאסטרטגיה  
הבסיסית שמוחקת את הלבנה. בהתנהגות כפולה בהתאם להגרלות הוספנו לאסטרטגיה הנבחרת  
את מה שהוגרל קודם באופן הבא:
- בהגרלה הראשונה הגרלנו התנהגות מיוחדת שאינה התנהגות כפולה.
- בהגרלה השניה הגרלנו התנהגות כך שאפשרנו שתוגרל התנהגות כפולה – אם נבחרה  
  התנהגות מיוחדת שאינה כפולה, סיימנו (נבחרו 2 התנהגויות כנדרש), אחרת: הגרלנו  
  עוד שתי התנהגויות מיוחדות כך שאף אחת מאיתן אינה התנהגות כפולה. (נבחרו 3  
  התנהגויות כנדרש). בדרך זאת דאגנו שיהיו לכל היותר 3 התנהגויות מיוחדות וגם  
  הוגרלה התנהגות כפולה לכל היותר פעמיים לפי המבוקש בתרגיל.

## 5. שינויים ב-API
### מחלקת הכדור (Ball)
- **getSpeed** – מחזירה את מהירות הכדור ומשמשת לאתחול המיקום של הכדור לאחר פסילה  
  או בתחילת המשחק – כך המהירות תהיה כמו לפני הפסילה בהתאם למה שכתבו בפורום  
  (במידה וזה טורבו).
- **applySpeed** ו- **unApplySpeed** מפעילה מהירות מסויימת על הכדור ומבטלת אותה  
  בהתאמה. נעשה בזה שימוש בטורבו ויהיה ניתן להרחיב לפעולות נוספות בעתיד כמו  
  כדור איטי וכ'.
- **setResetCounter** ו- **getResetCounter** – מגדירה לכדור מתי לאפס את עצמו  
  (לאחר כמה פגיעות) בהתאם למה שקיבל בבנאי.

### מחלקת מנהל המשחק (BrickerGameManager)
- **getSound**, **getImage** – פונקציות המקבלות enum של הכתובת בו שמור הקובץ ומחזירה  
  תמונה או סאונד כך לא נצטרך להעביר למחלקות השונות את ה-reader ומנהל המשחק  
  יוכל להחזיר אותם.
- **addObj** – מוסיף אובייקט למשחק כך לא נצטרך להעביר למחלקות השונות את ה-collection.
- **removeObj** – מוחקת אובייקט מהמשחק כך לא נצטרך להעביר למחלקות השונות את ה-collection.  
  מחזירה True אם המחיקה הצליחה כך נוכל לעדכן את המשתנה שסופר את כמות הלבנות שנמחקו  
  ללא כפילויות.
- **incrementCountCollision** – מגדילה ב-1 את כמות הלבנות שנמחקו, כך נוכל לשנות את זה  
  בעת מחיקת הלבנה רק אם לא נמחקה כבר.
- **getCenterPaddle** – מחזירה את הדסקית הראשית – כך נוכל לקבוע שהלבבות יתנגשו רק עם  
  הדסקית הזאת.
- **getMainBall** – מחזירה את כדור המשחק הראשי. כך נוכל לשנות דווקא את הכדור הראשי  
  לכדור טורבו.
- **getNewHeart** – מחזירה אובייקט חדש מסוג לב, מימוש במחלקת מנהל המשחק כך תמנע  
  העברת פרמטרים נוספים למחלקות השונות.

### פקטורי FactoryStrategies
במקום לפזר את יצירת האסטרטגיות השונות בכל הקוד, ניצור את האסטרטגיות במפעל זה,  
מה שיקל על תחזוקת הקוד והוספת אסטרטגיות בעתיד.  
**createCollisionStrategy** – באמצעות עיקרו העמסה יצרנו 2 פונקציות עם אות החתימה  
שמאפשרות לקבל כמות פרמטרים שונה ולייצר אובייקט **CollisionStrategy** בהתאם.

### מחלקת קבועים לנתיבי קבצי האודיו והסאונד (Path)
הוספנו מחלקת enum זאת מאחר שרצינו שתהיה גישה ושליטה על קבועי נתיבי התמונות והסרטונים.  
כך לא נצטרך לפזר את הנתיבים בכל מקום בקוד.
